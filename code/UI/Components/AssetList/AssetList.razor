@using System;
@using Sandbox;
@using Sandbox.UI;
@using System.Threading.Tasks
@namespace Scenebox.UI
@attribute [StyleSheet]

<root>

    <div class="left">
        <AssetFilters Result=@Result Query=@Query OnChange=@OnQueryUpdated></AssetFilters>
    </div>

    <div class="right">
        <div class="content">
            @if (FoundPackages == null)
            {
                <LoaderFullScreen></LoaderFullScreen>
            }
            else if (FoundPackages.Length == 0)
            {
                <div class="loading-status">Nothing Found</div>
            }
            else
            {
                @foreach (var group in FoundPackages.GroupBy(GroupBy).OrderBy(x => x.Key))
                {
                    if (!string.IsNullOrEmpty(group.Key))
                    {
                        <h1>@group.Key[2..]</h1>
                    }

                    foreach (var package in group)
                    {
                        if (package == null) continue;
                        <AssetCard class="@(SelectedPackage?.FullIdent == package.FullIdent ? "selected" : "")" OnMenu=@(() => OnMenu?.Invoke( package ) ) OnLaunch=@(() => Select(package) ) Package=@package></AssetCard>
                    }
                }
            }
        </div>
    </div>
</root>

@code
{
    public string Query { get; set; }
    public string Group { get; set; }
    public int Take { get; set; } = 100;
    public int Skip { get; set; }
    public bool ShowFilters { get; set; } = false;

    public System.Action<Package> OnMenu { get; set; }
    public System.Action<Package> OnSelected { get; set; }
    public System.Action<Package.FindResult> OnResult { get; set; }
    public Action<string> OnFilterChanged { get; set; }

    public Package[] FoundPackages { get; set; }
    public Package SelectedPackage { get; set; }

    Package.FindResult Result;

    protected override async Task OnParametersSetAsync()
    {
        FoundPackages = null;

        Query ??= "";

        await RunQuery();
    }

    void Select(Package package)
    {
        OnSelected?.Invoke(package);
        SelectedPackage = package;
    }

    async Task RunQuery()
    {
        var query = Query;

        Result = await Package.FindAsync(Query, Take, Skip);

        if (query != Query)
            return;

        if (Result != null)
        {
            OnResult?.Invoke(Result);

            FoundPackages = Result.Packages;
        }

        StateHasChanged();
    }

    void OnQueryUpdated(string newQuery)
    {
        if (Query == newQuery)
            return;

        Query = newQuery;

        _ = RunQuery();

        OnFilterChanged?.Invoke(newQuery);
    }

    string GroupBy(Package p)
    {
        if (Group == "state")
        {
            if (p.Interaction.Favourite) return "0 You Love";
            if (p.Interaction.FirstUsed == null) return "1 You haven't played";
            if (p.Updated > p.Interaction.LastUsed) return "2 Updated since you last played";
            return "3 Everything Else";
        }

        return "";
    }
}
